# -*- coding: utf-8 -*-
"""User views."""


import openai
from flask import Blueprint, render_template, request
from flask_login import login_required

blueprint = Blueprint("user", __name__, url_prefix="/users", static_folder="../static")

openai.api_key = "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"

system_prompt = {"role": "system", "content": "You are a helpful assistant."}
data = []


def get_gpt(incoming_msg):
    """
    Get a response from the GPT-3.5 Turbo model based on the incoming message.

    Args:
        incoming_msg (str): The incoming message from the user.

    Returns:
        str: The response generated by the GPT-3.5 Turbo model.
    """
    if incoming_msg == "clear":
        data.clear()
        data.append({"role": "assistant", "content": "hello"})
    else:
        data.append({"role": "assistant", "content": incoming_msg})

    messages = [system_prompt]
    messages.extend(data)
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo", messages=messages
        )
        content = response["choices"][0]["message"]["content"]
        return content
    except openai.error.RateLimitError as e:
        print(e)
        return ""


def get_dalle(incoming_msg):
    """
    Generate an image using the DALLÂ·E model based on the incoming message.

    Args:
        incoming_msg (str): The prompt used to generate the image.

    Returns:
        str: The URL of the generated image.
    """
    try:
        response = openai.Image.create(prompt=incoming_msg, n=1, size="512x512")
        content = response["data"][0]["url"]
        return content
    except openai.error.RateLimitError as e:
        print(e)
        return ""


@blueprint.route("/")
@login_required
def members():
    """List members."""
    return render_template("users/members.html")


@blueprint.route("/chatgpt/")
@login_required
def chatgpt():
    """List members."""
    return render_template("users/chatgpt.html")


@blueprint.route("/gpt_endpoint", methods=["GET", "POST"])
@login_required
def gpt_endpoint():
    """
    Handle GET and POST requests to the GPT endpoint.

    This function retrieves a user's text input from the request's query parameters,
    processes it using the get_gpt function, and returns the generated response as a string.

    Args:
        None (Query parameter 'msg' is expected in the request.)

    Returns:
        str: The generated response text.

    Raises:
        None
    """
    user_text = request.args.get("msg")
    return str(get_gpt(user_text))
